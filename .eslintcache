[{"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/index.js":"1","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/App.js":"2","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/pages/Home.jsx":"3","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/Enter.jsx":"4","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/View.jsx":"5","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/FolderSelector/FolderSelector.jsx":"6","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Question/Question.jsx":"7","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableSegmentation.jsx":"8","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotSegmentation.jsx":"9","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableParcellation.jsx":"10","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotParcellation.jsx":"11","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Scatter/Scatter.jsx":"12","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Line/Midline.jsx":"13","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Radar/Radar.jsx":"14","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/Boxplot.jsx":"15","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/ConfigModal/ConfigModal.jsx":"16","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/SubjectCard/SubjectCard.jsx":"17","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/View/View.jsx":"18","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/InfoTool/InfoTool.jsx":"19","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Loading/Loading.jsx":"20"},{"size":732,"mtime":1678393743741,"results":"21","hashOfConfig":"22"},{"size":199,"mtime":1678387824173,"results":"23","hashOfConfig":"22"},{"size":5792,"mtime":1678393768173,"results":"24","hashOfConfig":"22"},{"size":1826,"mtime":1678389585752,"results":"25","hashOfConfig":"22"},{"size":3930,"mtime":1678387824109,"results":"26","hashOfConfig":"22"},{"size":1958,"mtime":1678387824109,"results":"27","hashOfConfig":"22"},{"size":447,"mtime":1678387824109,"results":"28","hashOfConfig":"22"},{"size":5508,"mtime":1678391346758,"results":"29","hashOfConfig":"22"},{"size":1316,"mtime":1678391346754,"results":"30","hashOfConfig":"22"},{"size":6343,"mtime":1678391346758,"results":"31","hashOfConfig":"22"},{"size":3621,"mtime":1678391346750,"results":"32","hashOfConfig":"22"},{"size":4343,"mtime":1678391346758,"results":"33","hashOfConfig":"22"},{"size":3144,"mtime":1678391346754,"results":"34","hashOfConfig":"22"},{"size":2997,"mtime":1678391346754,"results":"35","hashOfConfig":"22"},{"size":899,"mtime":1678391346750,"results":"36","hashOfConfig":"22"},{"size":2351,"mtime":1678391871647,"results":"37","hashOfConfig":"22"},{"size":270,"mtime":1678388944799,"results":"38","hashOfConfig":"22"},{"size":8020,"mtime":1678394682212,"results":"39","hashOfConfig":"22"},{"size":244,"mtime":1678391455069,"results":"40","hashOfConfig":"22"},{"size":2203,"mtime":1678394582488,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"fll0z8",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/index.js",[],["91","92"],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/App.js",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/pages/Home.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/Enter.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/View.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/FolderSelector/FolderSelector.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Question/Question.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableSegmentation.jsx",["93","94","95"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './TableSegmentation.scss'\n\nfunction getMeanValues(subjects, method, scalar){\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][scalar]\n        )\n    })\n\n    value /= (subjects.length);\n    return value.toFixed(6)\n}\n\nfunction TableSegmentation(props) {\n\n    const [show, setShow] = useState(\"hide\")\n\n    function changeShow(){\n        let value = document.querySelector(\"#show\").value\n        setShow(value)\n    }\n\n    let headers = []\n    /* Selecionando os dados */\n    let subjects = props.data\n    if(show == \"show\"){\n        headers = [\"Method\", \"FA\", \"FA StdDev\",\"MD\", \"MD StdDev\", \"RD\", \"RD StdDev\", \"AD\", \"AD StdDev\"]\n    } else if(show == \"hide\"){\n        headers = [\"Method\", \"FA\", \"MD\", \"RD\", \"AD\"]\n    }\n\n    let cols = [[\"ROQS\", \"Watershed\"]]\n\n    for(let i = 1; i != headers.length; i++){\n        let v1 = getMeanValues(subjects, \"ROQS_scalar\", headers[i])\n        let v2 = getMeanValues(subjects, \"Watershed_scalar\", headers[i])\n        cols.push([v1, v2])\n    }\n    \n    /* Ajustes da tabela */\n\n    let data = [{\n        type: \"table\",\n        header: {\n            values: headers,\n            align: [\"center\"],\n            line: {width: 1, color: 'black'},\n            fill: {color: \"grey\"},\n            font: {family: \"Arial\", size: 14, color: \"white\"}\n        },\n        cells: {\n            values: cols,\n            height: 30,\n            align: [\"center\", \"center\"],\n            line: {width: 1, color: 'black'},\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \n        }\n    }]\n\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 10, l: 10, r: 10}}\n\n    return(\n\n        <div className='table-field'>\n                \n            <div className='table-row'>\n                <span className='table-title'>Segmentation Data</span>\n                <button className='btn-export'>Export</button>\n            </div>\n\n            <Plot data={data} layout={layout}/>\n        \n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Mode: </label>\n                    <select>\n                        <option>Overall</option>\n                    </select>\n                </div>\n        \n                <div className='select-group'>\n                    <label>Std. Dev: </label>\n                    <select onChange={changeShow} id=\"show\">\n                        <option value=\"hide\">Hide</option>\n                        <option value=\"show\">Show</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default TableSegmentation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotSegmentation.jsx",["96"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport Boxplot from './Boxplot'\nimport './BoxplotSegmentation.scss'\n\nfunction getScalarValues(data, method, scalar){\n    \n    let values = data.map((subject) => {\n                    return parseFloat(subject[method][scalar].toFixed(6))\n                })\n\n    return values\n}\n\nfunction BoxplotSegmentation(props) {\n\n    return (\n        <div className='boxplot-container'>\n            <span className='boxplot-title'>Segmentation Boxplots</span>\n\n            <div className='boxplot-row'>\n\n                <Boxplot title=\"FA\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"FA\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"FA\")} width=\"375\"/>\n                <Boxplot title=\"MD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"MD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"MD\")} width=\"375\"/>\n                <Boxplot title=\"RD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"RD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"RD\")} width=\"375\"/>\n                <Boxplot title=\"AD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"AD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"AD\")} width=\"375\"/>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default BoxplotSegmentation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableParcellation.jsx",["97"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './TableParcellation.scss'\n\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\n    let name = `${parc_method}_${scalar}_${part}`\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][name]\n        )\n    })\n\n    value /= (subjects.length);\n    return value.toFixed(6)\n}\n\nfunction TableParcellation(props) {\n\n    const [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\n    const [scalar, setScalar] = useState(\"FA\")\n\n    function changeMethod(){\n        let value = document.querySelector(\"#methodValue\").value\n        setMethodParcellation(value)\n    }\n\n    function changeScalar(){\n        let value = document.querySelector(\"#scalarValueParcellation\").value\n        setScalar(value)\n    }\n\n    let headers = [\"Method\", \"P1\", \"P2\", \"P3\", \"P4\", \"P5\"]\n    let subjects = props.data\n\n    let cols = [[\"ROQS\", \"Watershed\"]]\n\n    for(let i = 1; i != headers.length; i++){\n        let v1 = getMeanValues(subjects, \"ROQS_parcellation\", methodParcellation, scalar, headers[i])\n        let v2 = getMeanValues(subjects, \"Watershed_parcellation\", methodParcellation, scalar, headers[i])\n        cols.push([v1, v2])\n    }\n    \n\n    let data = [{\n        type: \"table\",\n        header: {\n            values: headers,\n            align: [\"center\"],\n            line: {width: 1, color: 'black'},\n            fill: {color: \"grey\"},\n            font: {family: \"Arial\", size: 14, color: \"white\"}\n        },\n        cells: {\n            values: cols,\n            height: 30,\n            align: [\"center\", \"center\"],\n            line: {width: 1, color: 'black'},\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \n        }\n    }]\n\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 0, l: 10, r: 10}}\n\n    return (\n        <div className='table-field'>\n                \n            <div className='table-row'>\n                <span className='table-title'>Parcellation</span>\n                <button className='btn-export'>Export</button>\n            </div>\n\n            <Plot data={data} layout={layout}/>\n\n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Mode: </label>\n                    <select>\n                        <option>Overall</option>\n                    </select>\n                </div>\n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodValue\" onChange={changeMethod}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"scalarValueParcellation\" onChange={changeScalar}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n    )\n}\n\nexport default TableParcellation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotParcellation.jsx",["98"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport Boxplot from './Boxplot'\nimport './BoxplotParcellation.scss'\n\nfunction getScalarValues(subjects, method, parc_method, scalar, part){\n\n    let name = `${parc_method}_${scalar}_${part}`\n    let values = subjects.map((subject) => {\n                    return subject[method][name]\n                })\n    return values\n}\n\nfunction BoxplotParcellation(props) {\n\n    let [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\n    let [scalarParcellation, setScalarParcellation] = useState(\"FA\")\n\n    function changeMethod(){\n        let value = document.querySelector(\"#methodParcellationValue\").value\n        setMethodParcellation(value)\n    }\n\n    function changeScalarParcellation(){\n        let value = document.querySelector(\"#parcellationSelect\").value\n        console.log(value)\n        setScalarParcellation(value)\n    }\n    \n    return (\n\n        <div className='boxplot-container'>\n            <span className='boxplot-title'>Parcellation Boxplots</span>\n\n            <div className='boxplot-row'>\n\n                <Boxplot title=\"P1\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P1\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P1\")} width=\"300\"/>\n                <Boxplot title=\"P2\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P2\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P2\")} width=\"300\"/>\n                <Boxplot title=\"P3\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P3\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P3\")} width=\"300\"/>\n                <Boxplot title=\"P4\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P4\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P4\")} width=\"300\"/>\n                <Boxplot title=\"P5\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P5\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P5\")} width=\"300\"/>\n\n            </div>\n\n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodParcellationValue\" onChange={changeMethod}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"parcellationSelect\" onChange={changeScalarParcellation}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default BoxplotParcellation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Scatter/Scatter.jsx",["99"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Scatter.scss'\n\nfunction getAllPoints(data, method, scalar){\n    let values = []\n\n    for(let i = 0; i != data.length; i++){\n        let value = data[i][method][scalar]\n        values.push(value)\n    }\n\n    return values\n}\n\nfunction Scatter(props) {\n\n    const [scalarX, setScalarX] = useState(\"FA\")\n    const [scalarY, setScalarY] = useState(\"MD\")\n\n    function changeScalarX(){\n        let value = document.querySelector(\"#scalarValueX\").value\n        setScalarX(value)\n    }\n\n    function changeScalarY(){\n        let value = document.querySelector(\"#scalarValueY\").value\n        setScalarY(value)\n    }\n\n    let watershed = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\n        y: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\n        mode: \"markers\",\n        type: \"scatter\",\n        name: \"Watershed\"\n    }\n\n    let roqs = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\n        y: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\n        mode: \"markers\",\n        type: \"scatter\",\n        name: \"ROQS\"\n    }\n\n    let watershedHistogramX = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\n        type: \"histogram\",\n        name: \"Watershed\",\n        opacity: 0.5\n    }\n\n    let ROQSHistogramX = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\n        type: \"histogram\",\n        name: \"ROQS\",\n        opacity: 0.5\n    }\n\n    let watershedHistogramY = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\n        type: \"histogram\",\n        name: \"Watershed\",\n        opacity: 0.5\n    }\n\n    let ROQSHistogramY = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\n        type: \"histogram\",\n        name: \"ROQS\",\n        opacity: 0.5\n    }\n\n    let dataHistogramX = [watershedHistogramX, ROQSHistogramX]\n    let dataHistogramY = [watershedHistogramY, ROQSHistogramY]\n    let data = [watershed, roqs]\n    \n    let layoutHistogramX = {\n        barmode: \"overlay\",\n        width: 800,\n        height: 280,\n        margin: {t: 30, b: 0},\n        title: `Scalar: ${scalarX}`\n    }\n\n    let layoutHistogramY = {\n        barmode: \"overlay\",\n        width: 800,\n        height: 280,\n        margin: {t: 30, b: 0},\n        title: `Scalar: ${scalarY}`\n    }\n\n    let layout = {\n                plot_bgcolor: '#E5ECF6',\n                height: 700,\n                margin: {t: 10},\n                yaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarY},\n                xaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarX},\n                legend: { orientation: \"h\" }\n                }\n\n    return (\n        <div className='scatter-container'>\n            \n            <span className='scatter-title'>Segmentation Statistics</span>\n\n            <div className='select-row'>\n\n                <div className='select-scalar'>\n                    <span>Scalar X</span>\n                    <select className='select' onChange={changeScalarX} id=\"scalarValueX\">\n                        <option value=\"FA\">FA</option>\n                        <option value=\"MD\">MD</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                    </select>\n                </div>\n\n                <div className='select-scalar'>\n                    <span>Scalar Y</span>\n                    <select className='select' onChange={changeScalarY} id=\"scalarValueY\">\n                        <option value=\"FA\">FA</option>\n                        <option value=\"MD\">MD</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                    </select>\n                </div>\n\n            </div>\n\n            <div className='scatter-row'>\n                <Plot data={data} layout={layout}/>\n                \n                <div className='scatter-col'>   \n                    <Plot data={dataHistogramX} layout={layoutHistogramX}/>\n                    <Plot data={dataHistogramY} layout={layoutHistogramY}/>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Scatter","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Line/Midline.jsx",["100","101","102","103","104"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Midline.scss'\n\nfunction getMeanPointsValue(data, method, scalar){\n\n    let size = data[0][\"Watershed_midlines\"][\"FA\"].length\n    let values = []\n\n    for(let p = 0; p != size; p++){\n        let p_sum = 0\n        for(let i = 0; i != data.length; i++){\n            p_sum += data[i][method][scalar][p]\n        }    \n        let p_value = p_sum / size\n        values.push(p_value)\n    }\n\n    return values\n}\n\nfunction getMeanThicknessValue(data, method){\n    let size = data[0][\"Watershed_thickness\"].length\n    let values = []\n\n    for(let p = 0; p != size; p++){\n        let p_sum = 0\n        for(let i = 0; i != data.length; i++){\n            p_sum += data[i][method][p]\n        }    \n        let p_value = p_sum / size\n        values.push(p_value)\n    }\n    return values\n}\n\nfunction Midline(props) {\n\n    const [scalar, setScalar] = useState(\"FA\")\n\n    function changeScalar(){\n        let value = document.querySelector(\"#scalarValue\").value\n        setScalar(value)\n    }\n\n    let roqs = {}\n    let watershed = {}\n\n    if(scalar != \"Thickness\"){\n        roqs = {\n            y: getMeanPointsValue(props.data, \"ROQS_midlines\", scalar),\n            modes: \"lines\",\n            name: \"ROQS\"\n        }\n    \n        watershed = {\n            y: getMeanPointsValue(props.data, \"Watershed_midlines\", scalar),\n            modes: \"lines\",\n            name: \"Watershed\"\n        }\n    } else{\n        roqs = {\n            y: getMeanThicknessValue(props.data, \"Watershed_thickness\"),\n            modes: \"lines\",\n            name: \"ROQS\"\n        }\n    \n        watershed = {\n            y: getMeanThicknessValue(props.data, \"ROQS_thickness\"),\n            modes: \"lines\",\n            name: \"Watershed\"\n        }\n    }\n\n    let data = [roqs, watershed]\n\n    let layout = {  \n                    title: \"Midline Plots\", \n                    height: 420, width: 660, margin: {t: 40, l: 50, r: 10}, \n                    legend: { orientation: \"h\" , x: 1, y: 1.1, xanchor: 'right'},\n                    plot_bgcolor: '#E5ECF6',\n                    yaxis: {\n                        gridcolor: 'rgb(255, 255, 255)'\n                    },\n                    xaxis: {\n                        gridcolor: 'rgb(255, 255, 255)',\n                        title: \"Points Along CC Body\"\n                    }\n                }\n\n    return (\n        <div className='midline-container'>\n            \n            <Plot data={data} layout={layout}/>\n\n            <div className='select-scalar'>\n                <span>Scalar</span>\n                <select className='select' onChange={changeScalar} id=\"scalarValue\">\n                    <option value=\"FA\">FA</option>\n                    <option value=\"MD\">MD</option>\n                    <option value=\"RD\">RD</option>\n                    <option value=\"AD\">AD</option>\n                    <option value=\"Thickness\">Thickness</option>\n                </select>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Midline","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Radar/Radar.jsx",["105"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Radar.scss'\n\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\n    let name = `${parc_method}_${scalar}_${part}`\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][name]\n        )\n    })\n\n    value /= (subjects.length);\n    return parseFloat(value.toFixed(6))\n}\n\nfunction getAllValues(subjects, method, parc_method, scalar){\n    let values = []\n    for(let i = 1; i != 6; i++){\n        values.push(getMeanValues(subjects, method, parc_method, scalar, `P${i}`))\n    }\n    return values\n}\n\nfunction Radar(props) {\n    const [methodRadar, setMethodRadar] = useState(\"Witelson\")\n    const [scalarRadar, setScalarRadar] = useState(\"FA\")\n\n    function changeMethodRadar(){\n        let value = document.querySelector(\"#methodRadar\").value\n        setMethodRadar(value)\n    }\n\n    function changeScalarRadar(){\n        let value = document.querySelector(\"#scalarRadar\").value\n        setScalarRadar(value)\n    }\n\n    let watershed = {\n        type: 'scatterpolar',\n        r: getAllValues(props.data, \"Watershed_parcellation\", methodRadar, scalarRadar),\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\n        fill: 'toself',\n        name: \"Watershed\"\n    }\n\n    let roqs = {\n        type: 'scatterpolar',\n        r: getAllValues(props.data, \"ROQS_parcellation\", methodRadar, scalarRadar),\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\n        fill: 'toself',\n        name: \"ROQS\"\n    }\n\n    let data = [watershed, roqs]\n\n    let layout = {\n        title: \"Radar Parcellation\",\n        legend: {orientation: \"h\"},\n        \n    }\n\n    return (\n        <div className='radar-container'>\n            <Plot data={data} layout={layout}/>\n            \n            <div className='options-col'>  \n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodRadar\" onChange={changeMethodRadar}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"scalarRadar\" onChange={changeScalarRadar}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n    )\n}\n\nexport default Radar","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/Boxplot.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/ConfigModal/ConfigModal.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/SubjectCard/SubjectCard.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/View/View.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/InfoTool/InfoTool.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Loading/Loading.jsx",["106"],"import React, { useState, useEffect } from 'react'\r\nimport './Loading.scss'\r\nimport { Dna } from  'react-loader-spinner'\r\n\r\nfunction Loading() {\r\n\r\n  const phrases = [\r\n    'The corpus callosum is the largest nerve fiber structure in the human brain. It contains about 200 million nerve fibers and weighs about 250 grams.',\r\n    'The corpus callosum was discovered by the Italian anatomist Luigi Rolando in 1809. He called it the \"cortical bridge\" because it connected the cortical areas of both cerebral hemispheres.',\r\n    \"The corpus callosum is responsible for allowing the transfer of sensory, motor and cognitive information between the cerebral hemispheres. That means it's important for functions like perception, language, learning, and memory.\",\r\n    'Some medical conditions, such as epilepsy, can be treated with surgery that cuts the corpus callosum. This is known as a callosotomy and is done to prevent epileptic activity from spreading from one hemisphere to the other.',\r\n    'Some research suggests that the size and shape of the corpus callosum may be related to gender differences. For example, studies indicate that the corpus callosum is proportionally larger in women than in men. Additionally, some research suggests that the corpus callosum may be more asymmetrical in men than in women.'\r\n  ]\r\n  \r\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentPhraseIndex(currentIndex => (currentIndex + 1) % phrases.length)\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [phrases])\r\n\r\n  setTimeout(() => {\r\n    window.location.assign(\"/Home\")\r\n  }, 5000);\r\n\r\n  return (\r\n    <div className='loader-container' id='loading-container'>\r\n        <Dna\r\n          visible={true}\r\n          height=\"80\"\r\n          width=\"80\"\r\n          ariaLabel=\"dna-loading\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"dna-wrapper\"\r\n        />\r\n      <span className='wait-phase'>Please wait a moment while we prepare everything.</span>\r\n      <span>Did you know?</span> \r\n      <span className='phrases'>{phrases[currentPhraseIndex]}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":29,"column":13,"nodeType":"113","messageId":"114","endLine":29,"endColumn":15},{"ruleId":"111","severity":1,"message":"112","line":31,"column":20,"nodeType":"113","messageId":"114","endLine":31,"endColumn":22},{"ruleId":"111","severity":1,"message":"115","line":37,"column":22,"nodeType":"113","messageId":"114","endLine":37,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":38,"column":22,"nodeType":"113","messageId":"114","endLine":38,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":8,"column":22,"nodeType":"113","messageId":"114","endLine":8,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":10,"column":22,"nodeType":"113","messageId":"114","endLine":10,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":12,"column":26,"nodeType":"113","messageId":"114","endLine":12,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":26,"column":22,"nodeType":"113","messageId":"114","endLine":26,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":28,"column":26,"nodeType":"113","messageId":"114","endLine":28,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":49,"column":15,"nodeType":"113","messageId":"114","endLine":49,"endColumn":17},{"ruleId":"111","severity":1,"message":"115","line":20,"column":22,"nodeType":"113","messageId":"114","endLine":20,"endColumn":24},{"ruleId":"120","severity":1,"message":"121","line":7,"column":9,"nodeType":"122","endLine":13,"endColumn":4},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'Plot' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'phrases' array makes the dependencies of useEffect Hook (at line 22) change on every render. To fix this, wrap the initialization of 'phrases' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]