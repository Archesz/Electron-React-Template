[{"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/index.js":"1","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/App.js":"2","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/pages/Home.jsx":"3","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/Enter.jsx":"4","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/View.jsx":"5","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/FolderSelector/FolderSelector.jsx":"6","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Question/Question.jsx":"7","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableSegmentation.jsx":"8","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotSegmentation.jsx":"9","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableParcellation.jsx":"10","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotParcellation.jsx":"11","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Scatter/Scatter.jsx":"12","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Line/Midline.jsx":"13","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Radar/Radar.jsx":"14","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/Boxplot.jsx":"15","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/ConfigModal/ConfigModal.jsx":"16","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/SubjectCard/SubjectCard.jsx":"17"},{"size":625,"mtime":1678387824189,"results":"18","hashOfConfig":"19"},{"size":199,"mtime":1678387824173,"results":"20","hashOfConfig":"19"},{"size":4953,"mtime":1678389123542,"results":"21","hashOfConfig":"19"},{"size":3147,"mtime":1678389544964,"results":"22","hashOfConfig":"19"},{"size":3930,"mtime":1678387824109,"results":"23","hashOfConfig":"19"},{"size":1958,"mtime":1678387824109,"results":"24","hashOfConfig":"19"},{"size":447,"mtime":1678387824109,"results":"25","hashOfConfig":"19"},{"size":2752,"mtime":1678388868795,"results":"26","hashOfConfig":"19"},{"size":1319,"mtime":1678388868663,"results":"27","hashOfConfig":"19"},{"size":3533,"mtime":1678388868783,"results":"28","hashOfConfig":"19"},{"size":3582,"mtime":1678388868607,"results":"29","hashOfConfig":"19"},{"size":4196,"mtime":1678388868727,"results":"30","hashOfConfig":"19"},{"size":3029,"mtime":1678388868699,"results":"31","hashOfConfig":"19"},{"size":2900,"mtime":1678388868703,"results":"32","hashOfConfig":"19"},{"size":864,"mtime":1678388868599,"results":"33","hashOfConfig":"19"},{"size":1833,"mtime":1678388944759,"results":"34","hashOfConfig":"19"},{"size":270,"mtime":1678388944799,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"fll0z8",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/index.js",[],["79","80"],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/App.js",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/pages/Home.jsx",["81","82","83","84"],"import React, {useState} from 'react'\r\n\r\n/* Data */\r\nimport subjects from '../data/mydata.json'\r\n\r\n/* Componentes */\r\nimport ConfigModal from '../components/ConfigModal/ConfigModal'\r\nimport SubjectCard from '../components/SubjectCard/SubjectCard'\r\nimport TableSegmentation from '../graphs/Table/TableSegmentation'\r\nimport TableParcellation from '../graphs/Table/TableParcellation'\r\nimport BoxplotSegmentation from '../graphs/Boxplot/BoxplotSegmentation'\r\nimport BoxplotParcellation from '../graphs/Boxplot/BoxplotParcellation'\r\nimport Scatter from '../graphs/Scatter/Scatter'\r\nimport Midline from '../graphs/Line/Midline'\r\n/* Icones */\r\nimport {BsGear} from 'react-icons/bs'\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport '../styles/home.scss'\r\nimport Radar from '../graphs/Radar/Radar'\r\n\r\nfunction showConfigs(){\r\n    const container = document.querySelector('#modalArea');\r\n    const root = createRoot(container); // createRoot(container!) if you use TypeScript\r\n\r\n    root.render(<ConfigModal root={root}/>)\r\n}\r\n\r\nfunction Home() {\r\n    \r\n    const [filter, setFilter] = useState(\"\")\r\n    const [data, setData] = useState(subjects)\r\n\r\n    function filterSubject(){\r\n        let value = document.querySelector(\"#filter\").value\r\n        setFilter(value)\r\n    }\r\n\r\n    /* Função que seleciona um sujeito com o Card */\r\n\r\n    function selectSubject(name){\r\n        if(name == \"All\"){\r\n            setData(subjects)\r\n        } else{\r\n            const selecteds = []\r\n            data.map((subject) => {if(subject[\"Id\"] == name){\r\n                selecteds.push(subject);\r\n            }})\r\n            setData(selecteds);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container-home'>\r\n\r\n            <div id=\"modalArea\">\r\n            </div>\r\n\r\n            <div className='header'>\r\n\r\n                <div className='banner'>   \r\n\r\n                    <div className='img-logo'></div>\r\n\r\n                    <span className='banner-span'>This is data exploration and visualization tool for diffusion tensor images of the corpus callosum. Upload data folders to begin. Further information can be found here.</span>\r\n\r\n                    <div className='banner-selects'>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Category: </label>\r\n                            <select>\r\n                                <option>Method</option>\r\n                                <option>Folder</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className='input-group'>\r\n                            <label>Segm. Method: </label>\r\n                            <select>\r\n                                <option>ROQS</option>\r\n                                <option>Watershed</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <button className='btn-check'>Check Quality [0]</button>\r\n\r\n                </div>\r\n\r\n                <div className='subjects-list'>\r\n\r\n                    <label>Subjects</label>\r\n\r\n                    <input placeholder='E.g: Subject_00002' id=\"filter\" onChange={filterSubject}/>\r\n\r\n                    <div className='subjects'>  \r\n                        <SubjectCard name=\"All\" onClick={selectSubject}/>\r\n\r\n                        {data.map((subject, index) => {\r\n                            if(subject[\"Id\"].includes(filter)){\r\n                                return(\r\n                                    <SubjectCard name={subject[\"Id\"]} id={index} key={index} onClick={selectSubject}/>\r\n                                )\r\n                            }\r\n                        })}\r\n\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <div className='square-field'>\r\n                    <div>\r\n                        <span className=\"qnt\">{data.length}</span>\r\n                        <span className=\"label\">Subjects</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <BsGear className='gear-icon' onClick={showConfigs}/>\r\n\r\n            </div>\r\n\r\n            <div className='area-view'>\r\n            \r\n                <div className='area-table'>\r\n                    <TableSegmentation data={data}/>\r\n                    <TableParcellation data={data}/>\r\n                </div>\r\n                    \r\n                <div className='area-boxplot'>\r\n                    <BoxplotSegmentation data={data} />\r\n                    <BoxplotParcellation data={data} />\r\n                </div>\r\n\r\n                <div className='area-scatter'>\r\n                    <Scatter data={data}/>\r\n                </div>\r\n\r\n                <div className='area-midline'>\r\n                    <Midline data={data}/>\r\n                    <Radar data={data}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/Enter.jsx",["85"],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Enter/View.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/FolderSelector/FolderSelector.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/Question/Question.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableSegmentation.jsx",["86","87","88"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './TableSegmentation.scss'\n\nfunction getMeanValues(subjects, method, scalar){\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][scalar]\n        )\n    })\n\n    value /= (subjects.length);\n    return value.toFixed(6)\n}\n\nfunction TableSegmentation(props) {\n\n    const [show, setShow] = useState(\"hide\")\n\n    function changeShow(){\n        let value = document.querySelector(\"#show\").value\n        setShow(value)\n    }\n\n    let headers = []\n    /* Selecionando os dados */\n    let subjects = props.data\n    if(show == \"show\"){\n        headers = [\"Method\", \"FA\", \"FA StdDev\",\"MD\", \"MD StdDev\", \"RD\", \"RD StdDev\", \"AD\", \"AD StdDev\"]\n    } else if(show == \"hide\"){\n        headers = [\"Method\", \"FA\", \"MD\", \"RD\", \"AD\"]\n    }\n\n    let cols = [[\"ROQS\", \"Watershed\"]]\n\n    for(let i = 1; i != headers.length; i++){\n        let v1 = getMeanValues(subjects, \"ROQS_scalar\", headers[i])\n        let v2 = getMeanValues(subjects, \"Watershed_scalar\", headers[i])\n        cols.push([v1, v2])\n    }\n    \n    /* Ajustes da tabela */\n\n    let data = [{\n        type: \"table\",\n        header: {\n            values: headers,\n            align: [\"center\"],\n            line: {width: 1, color: 'black'},\n            fill: {color: \"grey\"},\n            font: {family: \"Arial\", size: 14, color: \"white\"}\n        },\n        cells: {\n            values: cols,\n            height: 30,\n            align: [\"center\", \"center\"],\n            line: {width: 1, color: 'black'},\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \n        }\n    }]\n\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 10, l: 10, r: 10}}\n\n    return(\n\n        <div className='table-field'>\n                \n            <div className='table-row'>\n                <span className='table-title'>Segmentation Data</span>\n                <button className='btn-export'>Export</button>\n            </div>\n\n            <Plot data={data} layout={layout}/>\n        \n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Mode: </label>\n                    <select>\n                        <option>Overall</option>\n                    </select>\n                </div>\n        \n                <div className='select-group'>\n                    <label>Std. Dev: </label>\n                    <select onChange={changeShow} id=\"show\">\n                        <option value=\"hide\">Hide</option>\n                        <option value=\"show\">Show</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default TableSegmentation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotSegmentation.jsx",["89"],"import React from 'react'\nimport Plot from 'react-plotly.js'\nimport Boxplot from './Boxplot'\nimport './BoxplotSegmentation.scss'\n\nfunction getScalarValues(data, method, scalar){\n    \n    let values = data.map((subject) => {\n                    return parseFloat(subject[method][scalar].toFixed(6))\n                })\n\n    return values\n}\n\nfunction BoxplotSegmentation(props) {\n\n    return (\n        <div className='boxplot-container'>\n            <span className='boxplot-title'>Segmentation Boxplots</span>\n\n            <div className='boxplot-row'>\n\n                <Boxplot title=\"FA\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"FA\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"FA\")} width=\"375\"/>\n                <Boxplot title=\"MD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"MD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"MD\")} width=\"375\"/>\n                <Boxplot title=\"RD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"RD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"RD\")} width=\"375\"/>\n                <Boxplot title=\"AD\" watershed={getScalarValues(props.data, \"Watershed_scalar\", \"AD\")} roqs={getScalarValues(props.data, \"ROQS_scalar\", \"AD\")} width=\"375\"/>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default BoxplotSegmentation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Table/TableParcellation.jsx",["90"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './TableParcellation.scss'\n\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\n    let name = `${parc_method}_${scalar}_${part}`\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][name]\n        )\n    })\n\n    value /= (subjects.length);\n    return value.toFixed(6)\n}\n\nfunction TableParcellation(props) {\n\n    const [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\n    const [scalar, setScalar] = useState(\"FA\")\n\n    function changeMethod(){\n        let value = document.querySelector(\"#methodValue\").value\n        setMethodParcellation(value)\n    }\n\n    function changeScalar(){\n        let value = document.querySelector(\"#scalarValueParcellation\").value\n        setScalar(value)\n    }\n\n    let headers = [\"Method\", \"P1\", \"P2\", \"P3\", \"P4\", \"P5\"]\n    let subjects = props.data\n\n    let cols = [[\"ROQS\", \"Watershed\"]]\n\n    for(let i = 1; i != headers.length; i++){\n        let v1 = getMeanValues(subjects, \"ROQS_parcellation\", methodParcellation, scalar, headers[i])\n        let v2 = getMeanValues(subjects, \"Watershed_parcellation\", methodParcellation, scalar, headers[i])\n        cols.push([v1, v2])\n    }\n    \n\n    let data = [{\n        type: \"table\",\n        header: {\n            values: headers,\n            align: [\"center\"],\n            line: {width: 1, color: 'black'},\n            fill: {color: \"grey\"},\n            font: {family: \"Arial\", size: 14, color: \"white\"}\n        },\n        cells: {\n            values: cols,\n            height: 30,\n            align: [\"center\", \"center\"],\n            line: {width: 1, color: 'black'},\n            font: {family: \"Arial\", size: 12, color: \"black\"}    \n        }\n    }]\n\n    let layout = {width: \"50%\", height: 130, margin: {t: 10, b: 0, l: 10, r: 10}}\n\n    return (\n        <div className='table-field'>\n                \n            <div className='table-row'>\n                <span className='table-title'>Parcellation</span>\n                <button className='btn-export'>Export</button>\n            </div>\n\n            <Plot data={data} layout={layout}/>\n\n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Mode: </label>\n                    <select>\n                        <option>Overall</option>\n                    </select>\n                </div>\n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodValue\" onChange={changeMethod}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"scalarValueParcellation\" onChange={changeScalar}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n    )\n}\n\nexport default TableParcellation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/BoxplotParcellation.jsx",["91"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport Boxplot from './Boxplot'\nimport './BoxplotParcellation.scss'\n\nfunction getScalarValues(subjects, method, parc_method, scalar, part){\n\n    let name = `${parc_method}_${scalar}_${part}`\n    let values = subjects.map((subject) => {\n                    return subject[method][name]\n                })\n    return values\n}\n\nfunction BoxplotParcellation(props) {\n\n    let [methodParcellation, setMethodParcellation] = useState(\"Witelson\")\n    let [scalarParcellation, setScalarParcellation] = useState(\"FA\")\n\n    function changeMethod(){\n        let value = document.querySelector(\"#methodParcellationValue\").value\n        setMethodParcellation(value)\n    }\n\n    function changeScalarParcellation(){\n        let value = document.querySelector(\"#parcellationSelect\").value\n        console.log(value)\n        setScalarParcellation(value)\n    }\n    \n    return (\n\n        <div className='boxplot-container'>\n            <span className='boxplot-title'>Parcellation Boxplots</span>\n\n            <div className='boxplot-row'>\n\n                <Boxplot title=\"P1\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P1\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P1\")} width=\"300\"/>\n                <Boxplot title=\"P2\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P2\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P2\")} width=\"300\"/>\n                <Boxplot title=\"P3\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P3\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P3\")} width=\"300\"/>\n                <Boxplot title=\"P4\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P4\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P4\")} width=\"300\"/>\n                <Boxplot title=\"P5\" watershed={getScalarValues(props.data, \"Watershed_parcellation\", methodParcellation, scalarParcellation, \"P5\")} roqs={getScalarValues(props.data, \"ROQS_parcellation\", methodParcellation, scalarParcellation, \"P5\")} width=\"300\"/>\n\n            </div>\n\n            <div className='options-row'>  \n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodParcellationValue\" onChange={changeMethod}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"parcellationSelect\" onChange={changeScalarParcellation}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n\n    )\n}\n\nexport default BoxplotParcellation","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Scatter/Scatter.jsx",["92"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Scatter.scss'\n\nfunction getAllPoints(data, method, scalar){\n    let values = []\n\n    for(let i = 0; i != data.length; i++){\n        let value = data[i][method][scalar]\n        values.push(value)\n    }\n\n    return values\n}\n\nfunction Scatter(props) {\n\n    const [scalarX, setScalarX] = useState(\"FA\")\n    const [scalarY, setScalarY] = useState(\"MD\")\n\n    function changeScalarX(){\n        let value = document.querySelector(\"#scalarValueX\").value\n        setScalarX(value)\n    }\n\n    function changeScalarY(){\n        let value = document.querySelector(\"#scalarValueY\").value\n        setScalarY(value)\n    }\n\n    let watershed = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\n        y: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\n        mode: \"markers\",\n        type: \"scatter\",\n        name: \"Watershed\"\n    }\n\n    let roqs = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\n        y: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\n        mode: \"markers\",\n        type: \"scatter\",\n        name: \"ROQS\"\n    }\n\n    let watershedHistogramX = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarX),\n        type: \"histogram\",\n        name: \"Watershed\",\n        opacity: 0.5\n    }\n\n    let ROQSHistogramX = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarX),\n        type: \"histogram\",\n        name: \"ROQS\",\n        opacity: 0.5\n    }\n\n    let watershedHistogramY = {\n        x: getAllPoints(props.data, \"Watershed_scalar\", scalarY),\n        type: \"histogram\",\n        name: \"Watershed\",\n        opacity: 0.5\n    }\n\n    let ROQSHistogramY = {\n        x: getAllPoints(props.data, \"ROQS_scalar\", scalarY),\n        type: \"histogram\",\n        name: \"ROQS\",\n        opacity: 0.5\n    }\n\n    let dataHistogramX = [watershedHistogramX, ROQSHistogramX]\n    let dataHistogramY = [watershedHistogramY, ROQSHistogramY]\n    let data = [watershed, roqs]\n    \n    let layoutHistogramX = {\n        barmode: \"overlay\",\n        width: 800,\n        height: 280,\n        margin: {t: 30, b: 0},\n        title: `Scalar: ${scalarX}`\n    }\n\n    let layoutHistogramY = {\n        barmode: \"overlay\",\n        width: 800,\n        height: 280,\n        margin: {t: 30, b: 0},\n        title: `Scalar: ${scalarY}`\n    }\n\n    let layout = {\n                plot_bgcolor: '#E5ECF6',\n                height: 700,\n                margin: {t: 10},\n                yaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarY},\n                xaxis: {gridcolor: 'rgb(255, 255, 255)', title: scalarX},\n                legend: { orientation: \"h\" }\n                }\n\n    return (\n        <div className='scatter-container'>\n            \n            <span className='scatter-title'>Segmentation Statistics</span>\n\n            <div className='select-row'>\n\n                <div className='select-scalar'>\n                    <span>Scalar X</span>\n                    <select className='select' onChange={changeScalarX} id=\"scalarValueX\">\n                        <option value=\"FA\">FA</option>\n                        <option value=\"MD\">MD</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                    </select>\n                </div>\n\n                <div className='select-scalar'>\n                    <span>Scalar Y</span>\n                    <select className='select' onChange={changeScalarY} id=\"scalarValueY\">\n                        <option value=\"FA\">FA</option>\n                        <option value=\"MD\">MD</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                    </select>\n                </div>\n\n            </div>\n\n            <div className='scatter-row'>\n                <Plot data={data} layout={layout}/>\n                \n                <div className='scatter-col'>   \n                    <Plot data={dataHistogramX} layout={layoutHistogramX}/>\n                    <Plot data={dataHistogramY} layout={layoutHistogramY}/>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Scatter","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Line/Midline.jsx",["93","94","95","96","97"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Midline.scss'\n\nfunction getMeanPointsValue(data, method, scalar){\n\n    let size = data[0][\"Watershed_midlines\"][\"FA\"].length\n    let values = []\n\n    for(let p = 0; p != size; p++){\n        let p_sum = 0\n        for(let i = 0; i != data.length; i++){\n            p_sum += data[i][method][scalar][p]\n        }    \n        let p_value = p_sum / size\n        values.push(p_value)\n    }\n\n    return values\n}\n\nfunction getMeanThicknessValue(data, method){\n    let size = data[0][\"Watershed_thickness\"].length\n    let values = []\n\n    for(let p = 0; p != size; p++){\n        let p_sum = 0\n        for(let i = 0; i != data.length; i++){\n            p_sum += data[i][method][p]\n        }    \n        let p_value = p_sum / size\n        values.push(p_value)\n    }\n    return values\n}\n\nfunction Midline(props) {\n\n    const [scalar, setScalar] = useState(\"FA\")\n\n    function changeScalar(){\n        let value = document.querySelector(\"#scalarValue\").value\n        setScalar(value)\n    }\n\n    let roqs = {}\n    let watershed = {}\n\n    if(scalar != \"Thickness\"){\n        roqs = {\n            y: getMeanPointsValue(props.data, \"ROQS_midlines\", scalar),\n            modes: \"lines\",\n            name: \"ROQS\"\n        }\n    \n        watershed = {\n            y: getMeanPointsValue(props.data, \"Watershed_midlines\", scalar),\n            modes: \"lines\",\n            name: \"Watershed\"\n        }\n    } else{\n        roqs = {\n            y: getMeanThicknessValue(props.data, \"Watershed_thickness\"),\n            modes: \"lines\",\n            name: \"ROQS\"\n        }\n    \n        watershed = {\n            y: getMeanThicknessValue(props.data, \"ROQS_thickness\"),\n            modes: \"lines\",\n            name: \"Watershed\"\n        }\n    }\n\n    let data = [roqs, watershed]\n\n    let layout = {  \n                    title: \"Midline Plots\", \n                    height: 420, width: 660, margin: {t: 40, l: 50, r: 10}, \n                    legend: { orientation: \"h\" , x: 1, y: 1.1, xanchor: 'right'},\n                    plot_bgcolor: '#E5ECF6',\n                    yaxis: {\n                        gridcolor: 'rgb(255, 255, 255)'\n                    },\n                    xaxis: {\n                        gridcolor: 'rgb(255, 255, 255)',\n                        title: \"Points Along CC Body\"\n                    }\n                }\n\n    return (\n        <div className='midline-container'>\n            \n            <Plot data={data} layout={layout}/>\n\n            <div className='select-scalar'>\n                <span>Scalar</span>\n                <select className='select' onChange={changeScalar} id=\"scalarValue\">\n                    <option value=\"FA\">FA</option>\n                    <option value=\"MD\">MD</option>\n                    <option value=\"RD\">RD</option>\n                    <option value=\"AD\">AD</option>\n                    <option value=\"Thickness\">Thickness</option>\n                </select>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Midline","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Radar/Radar.jsx",["98"],"import React, {useState} from 'react'\nimport Plot from 'react-plotly.js'\nimport './Radar.scss'\n\nfunction getMeanValues(subjects, method, parc_method, scalar, part){\n    let name = `${parc_method}_${scalar}_${part}`\n    let value = 0\n    subjects.map((subject) => {\n        return(\n            value += subject[method][name]\n        )\n    })\n\n    value /= (subjects.length);\n    return parseFloat(value.toFixed(6))\n}\n\nfunction getAllValues(subjects, method, parc_method, scalar){\n    let values = []\n    for(let i = 1; i != 6; i++){\n        values.push(getMeanValues(subjects, method, parc_method, scalar, `P${i}`))\n    }\n    return values\n}\n\nfunction Radar(props) {\n    const [methodRadar, setMethodRadar] = useState(\"Witelson\")\n    const [scalarRadar, setScalarRadar] = useState(\"FA\")\n\n    function changeMethodRadar(){\n        let value = document.querySelector(\"#methodRadar\").value\n        setMethodRadar(value)\n    }\n\n    function changeScalarRadar(){\n        let value = document.querySelector(\"#scalarRadar\").value\n        setScalarRadar(value)\n    }\n\n    let watershed = {\n        type: 'scatterpolar',\n        r: getAllValues(props.data, \"Watershed_parcellation\", methodRadar, scalarRadar),\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\n        fill: 'toself',\n        name: \"Watershed\"\n    }\n\n    let roqs = {\n        type: 'scatterpolar',\n        r: getAllValues(props.data, \"ROQS_parcellation\", methodRadar, scalarRadar),\n        theta: ['P1', 'P2','P3', 'P4', 'P5'],\n        fill: 'toself',\n        name: \"ROQS\"\n    }\n\n    let data = [watershed, roqs]\n\n    let layout = {\n        title: \"Radar Parcellation\",\n        legend: {orientation: \"h\"},\n        \n    }\n\n    return (\n        <div className='radar-container'>\n            <Plot data={data} layout={layout}/>\n            \n            <div className='options-col'>  \n        \n                <div className='select-group'>\n                    <label>Parc. Method: </label>\n                    <select id=\"methodRadar\" onChange={changeMethodRadar}>\n                        <option value=\"Witelson\">Witelson</option>\n                        <option value=\"Hofer\">Hofer</option>\n                        <option value=\"Chao\">Chao</option>\n                        <option value=\"Cover\">Cover</option>\n                        <option value=\"Freesurfer\">Freesurfer</option>\n                    </select>\n                </div>\n\n                <div className='select-group'>\n                    <label>Scalar: </label>\n                    <select id=\"scalarRadar\" onChange={changeScalarRadar}>\n                        <option value=\"FA\">FA</option>\n                        <option value=\"RD\">RD</option>\n                        <option value=\"AD\">AD</option>\n                        <option value=\"MD\">MD</option>\n                    </select>\n                </div>\n        \n            </div>\n\n        </div>\n    )\n}\n\nexport default Radar","/home/jovi/Área de Trabalho/repositorios/relectron-template/src/graphs/Boxplot/Boxplot.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/ConfigModal/ConfigModal.jsx",[],"/home/jovi/Área de Trabalho/repositorios/relectron-template/src/components/SubjectCard/SubjectCard.jsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":42,"column":17,"nodeType":"105","messageId":"106","endLine":42,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":46,"column":32,"nodeType":"109","messageId":"110","endLine":46,"endColumn":34},{"ruleId":"103","severity":1,"message":"104","line":46,"column":53,"nodeType":"105","messageId":"106","endLine":46,"endColumn":55},{"ruleId":"107","severity":1,"message":"111","line":100,"column":52,"nodeType":"109","messageId":"112","endLine":100,"endColumn":54},{"ruleId":null,"fatal":true,"severity":2,"message":"113","line":1,"column":2},{"ruleId":"103","severity":1,"message":"104","line":29,"column":13,"nodeType":"105","messageId":"106","endLine":29,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":31,"column":20,"nodeType":"105","messageId":"106","endLine":31,"endColumn":22},{"ruleId":"103","severity":1,"message":"114","line":37,"column":22,"nodeType":"105","messageId":"106","endLine":37,"endColumn":24},{"ruleId":"115","severity":1,"message":"116","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":12},{"ruleId":"103","severity":1,"message":"114","line":38,"column":22,"nodeType":"105","messageId":"106","endLine":38,"endColumn":24},{"ruleId":"115","severity":1,"message":"116","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":12},{"ruleId":"103","severity":1,"message":"114","line":8,"column":22,"nodeType":"105","messageId":"106","endLine":8,"endColumn":24},{"ruleId":"103","severity":1,"message":"114","line":10,"column":22,"nodeType":"105","messageId":"106","endLine":10,"endColumn":24},{"ruleId":"103","severity":1,"message":"114","line":12,"column":26,"nodeType":"105","messageId":"106","endLine":12,"endColumn":28},{"ruleId":"103","severity":1,"message":"114","line":26,"column":22,"nodeType":"105","messageId":"106","endLine":26,"endColumn":24},{"ruleId":"103","severity":1,"message":"114","line":28,"column":26,"nodeType":"105","messageId":"106","endLine":28,"endColumn":28},{"ruleId":"103","severity":1,"message":"114","line":49,"column":15,"nodeType":"105","messageId":"106","endLine":49,"endColumn":17},{"ruleId":"103","severity":1,"message":"114","line":20,"column":22,"nodeType":"105","messageId":"106","endLine":20,"endColumn":24},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Parsing error: Unexpected token\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mHEAD\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m,\u001b[39m { useState } \u001b[36mfrom\u001b[39m \u001b[32m'react'\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[32m'../../styles/global.scss'\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m","Expected '!==' and instead saw '!='.","no-unused-vars","'Plot' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]